# /*******************************************************************************************
# *
# *   raylib [textures] example - Load textures from raw data
# *
# *   NOTE: Images are loaded in CPU memory (RAM); textures are loaded in GPU memory (VRAM)
# *
# *   This example has been created using raylib 1.3 (www.raylib.com)
# *   raylib is licensed under an unmodified zlib/libpng license (View raylib.h for details)
# *
# *   Copyright (c) 2015 Ramon Santamaria (@raysan5)
# *
# ********************************************************************************************/
# Ported to ruby by Aldrin Martoq (@aldrinmartoq)

require 'raylib'

# Initialization
screen_w = 800
screen_h = 450

RayWindow.init screen_w, screen_h, 'ruby raylib [textures] example - texture from raw data'

# NOTE: Textures MUST be loaded after Window initialization (OpenGL context is required)

# Load RAW image data (512x512, 32bit RGBA, no file header)
fudesumi_raw = RayImage.load_raw 'resources/fudesumi.raw', 384, 512, :uncompressed_r8g8b8a8, 0
fudesumi = fudesumi_raw.to_texture2d  # Upload CPU (RAM) image to GPU (VRAM)
fudesumi_raw.unload                   # Unload CPU (RAM) image data

# Generate a checked texture by code (1024x1024 pixels)
width = 1024
height = 1024

# Dynamic memory allocation to store pixels data (Color type)
pixels = FFI::MemoryPointer.new RayColor, width * height
array = []
(0...height).each do |y|
  (0...width).each do |x|
    if ((x / 32 + y / 32) / 1).even?
      color = RayColor[:orange]
    else
      color = RayColor[:gold]
    end
    array << color.r
    array << color.g
    array << color.b
    array << color.a
  end
end
pixels.write_array_of_uchar array

# Load pixels data into an image structure and create texture
checked_image = RayImage.load_ex pixels, width, height
checked = checked_image.to_texture2d
checked_image.unload # Unload CPU (RAM) image data

# Main game loop
until RayWindow.should_close? # Detect window close button or ESC key
  # Update
  # TODO: Update your variables here

  # Draw
  RayDraw.drawing do
    RayDraw.clear_background :raywhite

    checked.draw screen_w / 2 - checked.width / 2, screen_h / 2 - checked.height / 2, RayColor.fade(:white, 0.5)
    fudesumi.draw 430, -30, :white

    RayDraw.text 'CHECKED TEXTURE ', 84, 100, 30, :brown
    RayDraw.text 'GENERATED by CODE', 72, 164, 30, :brown
    RayDraw.text 'and RAW IMAGE LOADING', 46, 226, 30, :brown
  end
end

# De-Initialization
fudesumi.unload # Texture unloading
checked.unload  # Texture unloading
RayWindow.close # Close window and OpenGL context
